//Recursion

class Solution {
    public int search(int[] nums, int target) {

return binary_search(nums,0,nums.length-1,target);   
    }
    int binary_search(int[] arr,int low,int high,int target)
    {
        int mid=(high+low)/2;
        
        if(target==arr[mid])
        {System.out.print("returned");
        return mid;
        }
        else
        if(high>low)
        {

        if(arr[mid]<target)
        low=mid+1;
       
        else
        
            high=mid-1;

        return binary_search(arr,low,high,target);
        }

       return -1;
       }
}


////without recursion

class BinarySearch {
  
    // Returns index of x if it is present in arr[].
    int binarySearch(int arr[], int x)
    {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if x is present at mid
            if (arr[mid] == x)
                return mid;

            // If x greater, ignore left half
            if (arr[mid] < x)
                low = mid + 1;

            // If x is smaller, ignore right half
            else
                high = mid - 1;
        }

        // If we reach here, then element was
        // not present
        return -1;
    }
