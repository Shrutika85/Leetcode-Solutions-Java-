// class Solution {
//     public int subarraySum(int[] nums, int k) {
//         HashMap<Integer, Integer> sum_index_map
//             = new HashMap<>();
//         int maxLen = 0;
//         int prefix_sum = 0;

//         for (int i = 0; i < nums.length; i++) {
//             prefix_sum += nums[i];

//             if (prefix_sum == k) {
//                 maxLen = i + 1;
//             }

//             else if (sum_index_map.containsKey(prefix_sum - k)) {
//                 maxLen = Math.max(
//                     maxLen,
//                     i - sum_index_map.get(prefix_sum - k));
//             }

//             if (!sum_index_map.containsKey(prefix_sum)) {
//                 sum_index_map.put(prefix_sum, i);
//             }
//         }

//         return maxLen;
        
//     }
// }



class Solution {
    public int subarraySum(int[] nums, int k) {
       
        int right =0;
        int left=0;
        int sum =nums[0];
        int maxLen=0;
        int n=nums.length;

        while(right<n)
        {
            if(sum==k)
            {
                maxLen=Math.max(maxLen,(right-left)+1);

            }
            right++;
            if(right<n)
            sum+=nums[right];

            if(left<=right && sum>k)
            {
                sum-=nums[left];
                left++;
            }

        }

        return maxLen;

        
    }
}

